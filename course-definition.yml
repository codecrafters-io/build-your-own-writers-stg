# Edit the descriptions in the "stages" section of this file.
# Apply updates at: https://app-staging.codecrafters.io/courses/writers-stg/admin/updates

slug: "writers-stg"
name: "Build your own writers stg"
short_name: "writers-stg"
release_status: "alpha"
description_md: |-
  Add a description for your course here.
short_description_md: |-
  Add a short description for your course here.
completion_percentage: 15
languages:
  - slug: "go"
  - slug: "python"
  - slug: "rust"

marketing:
  difficulty: medium
  sample_extension_idea_title: "My course extension idea"
  sample_extension_idea_description: "A description for my course extension idea"
  testimonials: []

stages:
  - slug: "init"
    name: "The first stage"
    difficulty: very_easy
    description_md: |-
      In this stage, your server will respond to an HTTP request with a `200 OK` response.

      ### HTTP response

      An HTTP response is made up of three parts, each separated by a [CRLF](https://developer.mozilla.org/en-US/docs/Glossary/CRLF) (`\r\n`):
      1.  Status line.
      2.  Zero or more headers, each ending with a CRLF.
      3.  Optional message body.

      In this stage, your server's response will only contain a status line. Here's the response your server must send:
      ```javascript
      HTTP/1.1 200 OK\r\n\r\n
      ```

      Here's a breakdown of the response:
      ```javascript
      // Status line
      HTTP/1.1  // HTTP version
      200       // Status code
      OK        // Optional reason phrase
      \r\n      // CRLF that marks the end of the status line

      // Headers (empty)
      \r\n      // CRLF that marks the end of the headers

      // Message body (empty)
      ```

      ### Tests

      The tester will execute your program like this:
      ```
      $ ./your_server.sh
      ```

      The tester will then send an HTTP `GET` request to your server:
      ```
      $ curl -i http://localhost:4221
      ```

      Your server must respond to the request with the following response:
      ```javascript
      HTTP/1.1 200 OK\r\n\r\n
      ```

      ### Notes

      -   You can ignore the contents of the request. We'll cover parsing requests in later stages.
      -   For more information about HTTP responses, see the [MDN Web Docs on HTTP responses](https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages#http_responses) or the [HTTP/1.1 specification](https://datatracker.ietf.org/doc/html/rfc9112#name-message).
      -   This challenge uses HTTP/1.1.

    marketing_md: |-
      In this stage, we'll do XYZ.

  - slug: "second"
    name: "The second stage"
    difficulty: very_easy
    description_md: |-
      In this stage, we'll do XYZ

      **Example:** ABC

      Your program will be executed like this:

      ```bash
      $ echo "apple" | ./your_executable.sh -E "a"
      ```

      You program must ABCD.

    marketing_md: |-
      In this stage, we'll do XYZ.

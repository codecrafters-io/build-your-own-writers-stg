# Edit the descriptions in the "stages" section of this file.
# Apply updates at: https://app-staging.codecrafters.io/courses/writers-stg/admin/updates

slug: "writers-stg"
name: "Build your own writers stg"
short_name: "writers-stg"
release_status: "alpha"
description_md: |-
  Add a description for your course here.
short_description_md: |-
  Add a short description for your course here.
completion_percentage: 15
languages:
  - slug: "go"
  - slug: "python"
  - slug: "rust"

marketing:
  difficulty: medium
  sample_extension_idea_title: "My course extension idea"
  sample_extension_idea_description: "A description for my course extension idea"
  testimonials: []

stages:
  - slug: "init"
    name: "Read header"
    difficulty: very_easy
    description_md: |-
In this stage, you'll implement the `/echo/{str}` endpoint, which accepts a string and returns it in the response body.

### Response body

A response body is used to return content to the client. This content may be an entire web page, a file, a string, or anything else that can be represented with bytes.

Your `/echo/{str}` endpoint must return a `200` response, with the response body set to given string, and with a `Content-Type` and `Content-Length` header.

Here's an example of an `/echo/{str}` request:
```
GET /echo/abc HTTP/1.1\r\nHost: localhost:4221\r\nUser-Agent: curl/7.64.1\r\nAccept: */*\r\n\r\n
```

And here's the expected response:
```
HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nContent-Length: 3\r\n\r\nabc
```

Here's a breakdown of the response:
```
// Status line
HTTP/1.1 200 OK
\r\n                          // CRLF that marks the end of the status line

// Headers
Content-Type: text/plain\r\n  // Header that specifies the format of the response body
Content-Length: 3\r\n         // Header that specifies the size of the response body, in bytes
\r\n                          // CRLF that marks the end of the headers

// Response body
abc                           // The string from the request
```

The two headers are required for the client to be able to parse the response body. Note that each header ends in a CRLF, and the entire header section also ends in a CRLF.

### Tests

The tester will execute your program like this:
```
$ ./your_server.sh
```

The tester will then send a `GET` request to the `/echo/{str}` endpoint on your server, with some random string.
```
$ curl -i http://localhost:4221/echo/abc
```

Your server must respond with a `200` response that contains the following parts:
- `Content-Type` header set to `text/plain`.
- `Content-Length` header set to the length of the given string.
- Response body set to the given string.
```
HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nContent-Length: 3\r\n\r\nabc
```

### Notes

- For more information about HTTP responses, see the [MDN Web Docs on HTTP responses](https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages#http_responses) or the [HTTP/1.1 specification](https://datatracker.ietf.org/doc/html/rfc9112#name-message).

    marketing_md: |-
      In this stage, we'll do XYZ.

  - slug: "second"
    name: "The second stage"
    difficulty: very_easy
    description_md: |-
      In this stage, we'll do XYZ

      **Example:** ABC

      Your program will be executed like this:

      ```bash
      $ echo "apple" | ./your_executable.sh -E "a"
      ```

      You program must ABCD.

    marketing_md: |-
      In this stage, we'll do XYZ.

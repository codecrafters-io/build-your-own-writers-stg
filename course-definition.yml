# Edit the descriptions in the "stages" section of this file.
# Apply updates at: https://app-staging.codecrafters.io/courses/writers-stg/admin/updates

slug: "writers-stg"
name: "Build your own writers stg"
short_name: "writers-stg"
release_status: "alpha"
description_md: |-
  Add a description for your course here.
short_description_md: |-
  Add a short description for your course here.
completion_percentage: 15
languages:
  - slug: "go"
  - slug: "python"
  - slug: "rust"

marketing:
  difficulty: medium
  sample_extension_idea_title: "My course extension idea"
  sample_extension_idea_description: "A description for my course extension idea"
  testimonials: []

stages:
  - slug: "init" 
    name: "The first stage"
    difficulty: very_easy
    description_md: |-
      Welcome to the RDB Persistence Extension! In this extension, you'll add support for reading [RDB files](https://redis.io/docs/management/persistence/) (Redis Database files).

In this stage, you'll add support for two configuration parameters related to RDB persistence, as well as a command that returns the values of configuration parameters.

### RDB files

An RDB file is a point-in-time snapshot of a Redis dataset. When RDB persistence is enabled, the Redis server syncs its in-memory state with an RDB file, by doing the following:

1.  On startup, the Redis server loads the data from the RDB file. 
2.  While running, the Redis server periodically takes new snapshots of the dataset, in order to update the RDB file.

###  `dir` and `dbfilename`

The configuration parameters `dir` and `dbfilename` specify where an RDB file is stored:
-   `dir` - the path to the directory where the RDB file is stored (example: `/tmp/redis-data`)
-   `dbfilename` - the name of the RDB file (example: `rdbfile`)

### The `CONFIG GET` command

The [`CONFIG GET`](https://redis.io/docs/latest/commands/config-get/) command returns the values of configuration parameters.

It takes in one or more configuration parameters and returns a [RESP array](https://redis.io/docs/latest/develop/reference/protocol-spec/#arrays) of key-value pairs:

```bash
$ redis-cli config get dir
1) "dir"
2) "/tmp/redis-data"
```

Although `CONFIG GET` can fetch multiple parameters at a time, the tester will only send `CONFIG GET` commands with one parameter at a time.

### Tests

The tester will execute your program like this:

```bash
./spawn_redis_server.sh --dir /tmp/redis-files --dbfilename dump.rdb
```

It'll then send the following commands:

```bash
$ redis-cli CONFIG GET dir
$ redis-cli CONFIG GET dbfilename
```

Your server must respond to each `CONFIG GET` command with a RESP array containing two elements:

1.  The parameter **name**, encoded as a [RESP Bulk string](https://redis.io/docs/latest/develop/reference/protocol-spec/#bulk-strings)
2.  The parameter **value**, encoded as a RESP Bulk string
    

For example, if the value of `dir` is `/tmp/redis-files`, then the expected response to `CONFIG GET dir` is:

```bash
*2\r\n$3\r\ndir\r\n$16\r\n/tmp/redis-files\r\n
```

### Notes

1.  You don't need to do anything with the `dir` and `dbfilename` parametersâ€”you only need to accept them.
2.  If your repository was created before 5th Oct 2023, it's possible that your `./spawn_redis_server.sh` script is not passing arguments to your program. To fix this, you'll need to edit `./spawn_redis_server.sh`. Check the [update CLI args PR](https://github.com/codecrafters-io/build-your-own-redis/pull/89/files) for details on how to do this.

    marketing_md: |-
      In this stage, we'll do XYZ.

  - slug: "second"
    name: "The second stage"
    difficulty: very_easy
    description_md: |-
      In this stage, we'll do XYZ

      **Example:** ABC

      Your program will be executed like this:

      ```bash
      $ echo "apple" | ./your_executable.sh -E "a"
      ```

      You program must ABCD.

    marketing_md: |-
      In this stage, we'll do XYZ.
